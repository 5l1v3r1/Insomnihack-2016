diff -Naur qemu-2.5.0.orig/include/exec/cpu-all.h qemu-2.5.0/include/exec/cpu-all.h
--- qemu-2.5.0.orig/include/exec/cpu-all.h	2015-12-16 23:04:49.000000000 +0100
+++ qemu-2.5.0/include/exec/cpu-all.h	2016-03-10 21:40:51.000000000 +0100
@@ -192,6 +192,8 @@
 #define PAGE_EXEC      0x0004
 #define PAGE_BITS      (PAGE_READ | PAGE_WRITE | PAGE_EXEC)
 #define PAGE_VALID     0x0008
+#define PAGE_WWRITE    0x0200
+#define PAGE_WEXEC     0x0400
 /* original state of the write flag (used when tracking self-modifying
    code */
 #define PAGE_WRITE_ORG 0x0010
diff -Naur qemu-2.5.0.orig/linux-user/elfload.c qemu-2.5.0/linux-user/elfload.c
--- qemu-2.5.0.orig/linux-user/elfload.c	2015-12-16 23:04:50.000000000 +0100
+++ qemu-2.5.0/linux-user/elfload.c	2016-04-26 15:11:35.872243577 +0200
@@ -16,6 +16,9 @@
 #include "qemu.h"
 #include "disas/disas.h"
 
+int do_aslr = 1;
+int do_pie = 1;
+
 #ifdef _ARCH_PPC64
 #undef ARCH_DLINFO
 #undef ELF_PLATFORM
@@ -1442,8 +1445,32 @@
         guard = qemu_real_host_page_size;
     }
 
-    error = target_mmap(0, size + guard, PROT_READ | PROT_WRITE,
+    if (do_aslr == 0)
+    {
+        error = target_mmap(0, size + guard, PROT_READ | PROT_WRITE,
                         MAP_PRIVATE | MAP_ANONYMOUS, -1, 0);
+    }
+    else
+    {
+        int attempts;
+        int newarg1;
+        int fd = open("/dev/urandom", O_RDONLY);
+        read(fd, &newarg1, sizeof(newarg1));
+        close(fd);
+        srand(newarg1);
+
+        for(attempts = 0; attempts < 10; attempts++)
+        {
+           if(attempts < 9)
+               newarg1 = (rand() & 0x00fff000)|0xf2000000;
+           else
+               newarg1 = 0;
+           error = target_mmap(newarg1, size + guard, PROT_READ | PROT_WRITE,
+                            MAP_PRIVATE | MAP_ANONYMOUS, -1, 0);
+           if((error > 0) || (error < -TARGET_ENOTRECOVERABLE))
+               break;
+        }
+    }
     if (error == -1) {
         perror("mmap stack");
         exit(-1);
@@ -1814,10 +1841,15 @@
 {
     struct elfhdr *ehdr = (struct elfhdr *)bprm_buf;
     struct elf_phdr *phdr;
-    abi_ulong load_addr, load_bias, loaddr, hiaddr, error;
+    abi_ulong load_addr, load_bias, loaddr, newloaddr, hiaddr, error;
     int i, retval;
     const char *errmsg;
 
+    i = open("/dev/urandom", O_RDONLY);
+    read(i, &retval, sizeof(retval));
+    close(i);
+    srand(retval);
+
     /* First of all, some simple consistency checks */
     errmsg = "Invalid ELF image for this architecture";
     if (!elf_check_ident(ehdr)) {
@@ -1865,7 +1897,8 @@
     }
 
     load_addr = loaddr;
-    if (ehdr->e_type == ET_DYN) {
+
+    if ((ehdr->e_type == ET_DYN) && (do_pie == 0)) {
         /* The image indicates that it can be loaded anywhere.  Find a
            location that can hold the memory space required.  If the
            image is pre-linked, LOADDR will be non-zero.  Since we do
@@ -1877,6 +1910,33 @@
         if (load_addr == -1) {
             goto exit_perror;
         }
+    }
+    else if ((ehdr->e_type == ET_DYN) && (do_pie == 1)) {
+
+#define load_attempts 10
+	for(i = 0; i < load_attempts; i++)
+	{
+		//try 9 times, otherwise select 0 as a last resort
+		if((loaddr == 0) && (i < (load_attempts-1)))
+			newloaddr = rand() & 0xfffff000;
+		else
+			newloaddr = loaddr;
+
+        	load_addr = target_mmap(newloaddr, hiaddr - loaddr, PROT_NONE,
+                	                MAP_PRIVATE | MAP_ANON | MAP_NORESERVE,
+                        	        -1, 0);
+        	if (load_addr == -1) {
+			if (loaddr != 0)
+				goto exit_perror;
+			else if (i >= load_attempts)
+			{
+				//we keep trying and failing
+				goto exit_perror;
+			}
+		}
+		else
+			break;
+        }
     } else if (pinterp_name != NULL) {
         /* This is the main executable.  Make sure that the low
            address does not conflict with MMAP_MIN_ADDR or the
diff -Naur qemu-2.5.0.orig/linux-user/main.c qemu-2.5.0/linux-user/main.c
--- qemu-2.5.0.orig/linux-user/main.c	2015-12-16 23:04:50.000000000 +0100
+++ qemu-2.5.0/linux-user/main.c	2016-03-14 22:08:33.000000000 +0100
@@ -45,6 +45,8 @@
 unsigned long mmap_min_addr;
 unsigned long guest_base;
 int have_guest_base;
+int do_nx = 0;
+
 #if (TARGET_LONG_BITS == 32) && (HOST_LONG_BITS == 64)
 /*
  * When running 32-on-64 we should make sure we can fit all of the possible
@@ -671,6 +673,14 @@
     uint32_t addr;
 
     for(;;) {
+        if (do_nx)
+        {
+            if ((page_get_flags(env->regs[15]) & PAGE_EXEC) != PAGE_EXEC)
+            {
+                info.si_signo = TARGET_SIGSEGV;
+                queue_signal(env, info.si_signo, &info);
+            }
+        }
         cpu_exec_start(cs);
         trapnr = cpu_arm_exec(cs);
         cpu_exec_end(cs);
@@ -3890,6 +3900,31 @@
     exit(EXIT_SUCCESS);
 }
 
+static void handle_arg_nx(const char *arg)
+{
+    do_nx = 1;
+}
+
+static void handle_arg_mmap(const char *arg)
+{
+    do_mmap = 1;
+}
+
+static void handle_arg_nopie(const char *arg)
+{
+    do_pie = 0;
+}
+
+static void handle_arg_noaslr(const char *arg)
+{
+    do_aslr = 0;
+}
+
+static void handle_arg_wxorx(const char *arg)
+{
+    do_wxorx = 1;
+}
+
 struct qemu_argument {
     const char *argv;
     const char *env;
@@ -3939,6 +3974,16 @@
      "",           "Seed for pseudo-random number generator"},
     {"version",    "QEMU_VERSION",     false, handle_arg_version,
      "",           "display version information and exit"},
+    {"mmap",       "QEMU_MMAP",        false, handle_arg_mmap,
+     "",           "show mmap allocations"},
+    {"nx",         "QEMU_NX",          false, handle_arg_nx,
+     "",           "enable NX implementation"},
+    {"nopie",      "QEMU_NOPIE",       false, handle_arg_nopie,
+     "",           "disable PIE randomization"},
+    {"noaslr",     "QEMU_NOASLR",      false, handle_arg_noaslr,
+     "",           "disable ASLR randomization"},
+    {"wxorx",      "QEMU_WXORX",       false, handle_arg_wxorx,
+     "",           "enable W^X implementation"},
     {NULL, NULL, false, NULL, NULL, NULL}
 };
 
diff -Naur qemu-2.5.0.orig/linux-user/mmap.c qemu-2.5.0/linux-user/mmap.c
--- qemu-2.5.0.orig/linux-user/mmap.c	2015-12-16 23:04:50.000000000 +0100
+++ qemu-2.5.0/linux-user/mmap.c	2016-03-14 22:08:43.000000000 +0100
@@ -32,7 +32,10 @@
 #include "qemu-common.h"
 #include "translate-all.h"
 
-//#define DEBUG_MMAP
+int do_wxorx = 0;
+int do_mmap = 0;
+
+#define DEBUG_MMAP
 
 static pthread_mutex_t mmap_mutex = PTHREAD_MUTEX_INITIALIZER;
 static __thread int mmap_lock_count;
@@ -74,11 +77,16 @@
     int prot1, ret;
 
 #ifdef DEBUG_MMAP
-    printf("mprotect: start=0x" TARGET_ABI_FMT_lx
-           "len=0x" TARGET_ABI_FMT_lx " prot=%c%c%c\n", start, len,
+    if (do_mmap == 1)
+    {
+        printf("mprotect: start=0x" TARGET_ABI_FMT_lx
+           "len=0x" TARGET_ABI_FMT_lx " prot=%c%c%c  extprot=%c%c\n", start, len,
            prot & PROT_READ ? 'r' : '-',
            prot & PROT_WRITE ? 'w' : '-',
-           prot & PROT_EXEC ? 'x' : '-');
+           prot & PROT_EXEC ? 'x' : '-',
+           page_get_flags(start) & PAGE_WWRITE ? 'W' : '-',
+           page_get_flags(start) & PAGE_WEXEC ? 'X' : '-');
+    }
 #endif
 
     if ((start & ~TARGET_PAGE_MASK) != 0)
@@ -87,10 +95,24 @@
     end = start + len;
     if (end < start)
         return -EINVAL;
-    prot &= PROT_READ | PROT_WRITE | PROT_EXEC;
+    if (do_wxorx == 0)
+    {
+        prot &= PROT_READ | PROT_WRITE | PROT_EXEC;
+    }
+    else {
+        prot &= PROT_READ | PROT_WRITE | PROT_EXEC | PAGE_WEXEC | PAGE_WWRITE;
+    }
     if (len == 0)
         return 0;
 
+    if (do_wxorx == 1)
+    {
+        if (((prot & PROT_EXEC) && (prot & PROT_WRITE)) || ((page_get_flags(start) & PAGE_WEXEC) && (prot & PAGE_WRITE)) || ((page_get_flags(start) & PAGE_WWRITE) && (prot & PROT_EXEC)))
+        {
+            return -EINVAL;
+        }
+    }
+
     mmap_lock();
     host_start = start & qemu_host_page_mask;
     host_end = HOST_PAGE_ALIGN(end);
@@ -129,6 +151,10 @@
         if (ret != 0)
             goto error;
     }
+    if ((prot & PROT_WRITE) && (do_wxorx == 1))
+        prot |= PAGE_WWRITE;
+    else if ((prot & PROT_EXEC) && (do_wxorx == 1))
+        prot |= PAGE_WEXEC;
     page_set_flags(start, start + len, prot | PAGE_VALID);
     mmap_unlock();
     return 0;
@@ -371,6 +397,7 @@
 
     mmap_lock();
 #ifdef DEBUG_MMAP
+    if (do_mmap == 1)
     {
         printf("mmap: start=0x" TARGET_ABI_FMT_lx
                " len=0x" TARGET_ABI_FMT_lx " prot=%c%c%c flags=",
@@ -397,6 +424,12 @@
     }
 #endif
 
+    if ((do_wxorx == 1 ) && ((prot & PROT_EXEC) && (prot & PROT_WRITE)))
+    {
+        errno = EINVAL;
+        goto fail;
+    }
+
     if (offset & ~TARGET_PAGE_MASK) {
         errno = EINVAL;
         goto fail;
@@ -559,12 +592,19 @@
         }
     }
  the_end1:
+    if ((prot & PROT_WRITE) && (do_wxorx == 1))
+        prot |= PAGE_WWRITE;
+    else if ((prot & PROT_EXEC) && (do_wxorx == 1))
+        prot |= PAGE_WEXEC;
     page_set_flags(start, start + len, prot | PAGE_VALID);
  the_end:
 #ifdef DEBUG_MMAP
-    printf("ret=0x" TARGET_ABI_FMT_lx "\n", start);
-    page_dump(stdout);
-    printf("\n");
+    if (do_mmap == 1)
+    {
+        printf("ret=0x" TARGET_ABI_FMT_lx "\n", start);
+        page_dump(stdout);
+        printf("\n");
+    }
 #endif
     tb_invalidate_phys_range(start, start + len);
     mmap_unlock();
@@ -621,9 +661,13 @@
     int prot, ret;
 
 #ifdef DEBUG_MMAP
-    printf("munmap: start=0x" TARGET_ABI_FMT_lx " len=0x"
+    if (do_mmap)
+    {
+
+        printf("munmap: start=0x" TARGET_ABI_FMT_lx " len=0x"
            TARGET_ABI_FMT_lx "\n",
            start, len);
+    }
 #endif
     if (start & ~TARGET_PAGE_MASK)
         return -EINVAL;
diff -Naur qemu-2.5.0.orig/linux-user/qemu.h qemu-2.5.0/linux-user/qemu.h
--- qemu-2.5.0.orig/linux-user/qemu.h	2015-12-16 23:04:50.000000000 +0100
+++ qemu-2.5.0/linux-user/qemu.h	2016-03-14 21:52:40.000000000 +0100
@@ -207,6 +207,12 @@
 
 #include "qemu/log.h"
 
+/*  global variables */
+extern int do_wxorx;
+extern int do_aslr;
+extern int do_pie;
+extern int do_mmap;
+
 /* syscall.c */
 int host_to_target_waitstatus(int status);
 
diff -Naur qemu-2.5.0.orig/linux-user/syscall.c qemu-2.5.0/linux-user/syscall.c
--- qemu-2.5.0.orig/linux-user/syscall.c	2015-12-16 23:04:50.000000000 +0100
+++ qemu-2.5.0/linux-user/syscall.c	2016-03-11 13:43:16.000000000 +0100
@@ -685,7 +685,6 @@
     mapped_addr = get_errno(target_mmap(brk_page, new_alloc_size,
                                         PROT_READ|PROT_WRITE,
                                         MAP_ANON|MAP_PRIVATE, 0, 0));
-
     if (mapped_addr == brk_page) {
         /* Heap contents are initialized to zero, as for anonymous
          * mapped pages.  Technically the new pages are already
@@ -3177,8 +3176,27 @@
         host_raddr = shmat(shmid, (void *)g2h(shmaddr), shmflg);
     else {
         abi_ulong mmap_start;
-
-        mmap_start = mmap_find_vma(0, shm_info.shm_segsz);
+        if (do_aslr == 0)
+        {
+          mmap_start = mmap_find_vma(0, shm_info.shm_segsz);
+        }
+        else
+        {
+          int attempts;
+          int newstart;
+          int fd = open("/dev/urandom", O_RDONLY);
+          read(fd, &newstart, sizeof(newstart));
+          close(fd);
+          srand(newstart);
+
+          for(attempts = 0; attempts < 10; attempts++)
+          {
+            newstart = rand() & 0xffffe000;
+            mmap_start = mmap_find_vma(newstart, shm_info.shm_segsz);
+            if(mmap_start > 0)
+              break;
+          }
+        }
 
         if (mmap_start == -1) {
             errno = ENOMEM;
@@ -7078,10 +7096,39 @@
                                         v5, v6));
         }
 #else
+    if (do_aslr == 0)
+    {
         ret = get_errno(target_mmap(arg1, arg2, arg3,
                                     target_to_host_bitmask(arg4, mmap_flags_tbl),
                                     arg5,
                                     arg6));
+    }
+    else
+  {
+    int attempts;
+    int newarg1;
+    if(arg1 == 0)
+    {
+      int fd = open("/dev/urandom", O_RDONLY);
+      read(fd, &newarg1, sizeof(newarg1));
+      close(fd);
+      srand(newarg1);
+    }
+
+    for(attempts = 0; attempts < 10; attempts++)
+    {
+      if((arg1 == 0) && (attempts < 9))
+        newarg1 = rand() & 0xfffff000;
+      else
+        newarg1 = arg1;
+            ret = get_errno(target_mmap(newarg1, arg2, arg3,
+                                    target_to_host_bitmask(arg4, mmap_flags_tbl),
+                                    arg5,
+                                    arg6));
+      if((ret > 0) || (ret < -TARGET_ENOTRECOVERABLE))
+        break;
+    }
+  }
 #endif
         break;
 #endif
@@ -7090,10 +7137,39 @@
 #ifndef MMAP_SHIFT
 #define MMAP_SHIFT 12
 #endif
+    if (do_aslr == 0)
+    {
         ret = get_errno(target_mmap(arg1, arg2, arg3,
                                     target_to_host_bitmask(arg4, mmap_flags_tbl),
                                     arg5,
                                     arg6 << MMAP_SHIFT));
+    }
+    else
+	{
+		int attempts;
+		int newarg1;
+		if(arg1 == 0)
+		{
+			int fd = open("/dev/urandom", O_RDONLY);
+			read(fd, &newarg1, sizeof(newarg1));
+			close(fd);
+			srand(newarg1);
+		}
+
+		for(attempts = 0; attempts < 10; attempts++)
+		{
+			if((arg1 == 0) && (attempts < 9))
+				newarg1 = rand() & 0xfffff000;
+			else
+				newarg1 = arg1;
+	        	ret = get_errno(target_mmap(newarg1, arg2, arg3,
+        	        	                    target_to_host_bitmask(arg4, mmap_flags_tbl),
+                	        	            arg5,
+                        	        	    arg6 << MMAP_SHIFT));
+			if((ret > 0) || (ret < -TARGET_ENOTRECOVERABLE))
+				break;
+		}
+	}
         break;
 #endif
     case TARGET_NR_munmap:
